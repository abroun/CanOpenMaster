//------------------------------------------------------------------------------
// File: CanOpenTest.cpp
// Desc: Example program that lets you interact with a CANBUS network
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdint.h>
#include <signal.h>
#include "CanOpenMaster/CanOpenMaster.h"

//------------------------------------------------------------------------------
const uint8_t TEST_NODE_ID = 18;
bool gbTestNodePreoperational = false;
bool gbSdoMessageDone = false;

//------------------------------------------------------------------------------
// CanOpen event callbacks
//------------------------------------------------------------------------------
void HeartbeatErrorCallback( COM_CanChannelHandle handle, uint8_t error )
{
    printf( "Got heartbeat error callback\n" );
}

//------------------------------------------------------------------------------
void PostSyncCallback( COM_CanChannelHandle handle )
{
    printf( "Got post sync callback\n" );
}

//------------------------------------------------------------------------------
void PostTpdoCallback( COM_CanChannelHandle handle )
{
    printf( "Got post TPDO callback\n" );
}

//------------------------------------------------------------------------------
void PostEmergencyCallback( COM_CanChannelHandle handle, 
                            uint8_t nodeId, uint16_t errCode, uint8_t errReg )
{
    printf( "PostEmergency called for node %i - ErrorCode: 0x%X, ErrorReg: 0x%X\n", 
            nodeId, errCode, errReg );
}

//------------------------------------------------------------------------------
void PostSlaveBootupCallback( COM_CanChannelHandle handle, uint8_t nodeId )
{
    printf( "Got slave bootup callback for node %i\n", nodeId );
    
    if ( TEST_NODE_ID == nodeId )
    {
        gbTestNodePreoperational = true;
    }
}

//------------------------------------------------------------------------------
void SdoReadCallback( COM_CanChannelHandle handle, uint8_t nodeId, uint8_t* pData, uint8_t numBytes )
{
    printf( "Got " );
    for ( uint8_t i = 0; i < numBytes; i++ )
    {
        printf( "%X ", pData[ i ] );
    }
    printf( "from node %i\n", nodeId );
    
    printf( "This is %i as a uint16_t\n", *((uint16_t*)pData) );
    
    gbSdoMessageDone = true;
}

//------------------------------------------------------------------------------
void SdoWriteCallback( COM_CanChannelHandle handle, uint8_t nodeId )
{    
    gbSdoMessageDone = true;
}

//------------------------------------------------------------------------------
void onExit( void )
{
    printf( "Exit handler called\n" );
    
    COM_Deinit();
}

//------------------------------------------------------------------------------
void onSignal( int signal )
{
    exit( 0 );
}

//------------------------------------------------------------------------------
int main( int argc, char** argv )
{
    // Initialise the CanOpenMaster library
    if ( !COM_Init() )
    {
        fprintf( stderr, "Error: Unable to initialise the CanOpenMaster library\n" );
        return -1;
    }
    
    atexit( onExit );
    signal( SIGINT, onSignal );
    
    // Open a CAN channel
    COM_CanChannelCallbacks callbacks;
    memset( &callbacks, 0, sizeof( callbacks ) );
    
    callbacks.mHeartbeatErrorCB = HeartbeatErrorCallback;
    callbacks.mPostSyncCB = PostSyncCallback;
    callbacks.mPostTpdoCB = PostTpdoCallback;
    callbacks.mPostEmergencyCB = PostEmergencyCallback;
    callbacks.mPostSlaveBootupCB = PostSlaveBootupCallback;
    
    COM_CanChannelHandle channelHandle = COM_OpenChannel( "libCanUSBDriver.so", "", "1M", callbacks );
    if ( NULL == channelHandle )
    {
        fprintf( stderr, "Error: Unable to open CAN channel\n" );
        exit( -1 );
    }
    
    printf( "Opened channel...\n" );
    
    // Reset all nodes and wait
    if ( !COM_QueueNmtResetNode( channelHandle, 0 ) )
    {
        fprintf( stderr, "Error: Unable to send NMT reset node message\n" );
        exit( -1 );
    }
    printf( "Resetting nodes...\n" );
    
    while ( !gbTestNodePreoperational );    // Block until the test node is pre-operational
    
    gbSdoMessageDone = false;
    if ( !COM_QueueSdoReadMsg( channelHandle, TEST_NODE_ID, 0x6086, 0, SdoReadCallback ) )
    {
        fprintf( stderr, "Error: Unable to queue SDO read message\n" );
        exit( -1 );
    }
    
    while ( !gbSdoMessageDone );
    
    int16_t data = 1;
    gbSdoMessageDone = false;
    if ( !COM_QueueSdoWriteMsg( channelHandle, TEST_NODE_ID, 0x6086, 0, 
        SdoWriteCallback, (uint8_t*)&data, sizeof( data ) ) )
    {
        fprintf( stderr, "Error: Unable to queue SDO write message\n" );
        exit( -1 );
    }
    
    printf( "Queued a write message\n" );
    while ( !gbSdoMessageDone );
    
    gbSdoMessageDone = false;
    if ( !COM_QueueSdoReadMsg( channelHandle, TEST_NODE_ID, 0x6086, 0, SdoReadCallback ) )
    {
        fprintf( stderr, "Error: Unable to queue SDO read message\n" );
        exit( -1 );
    }
    
    while ( !gbSdoMessageDone );
    
    COM_CloseChannel( &channelHandle );
    
    return 0;
}

